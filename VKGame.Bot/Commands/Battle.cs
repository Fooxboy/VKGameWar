using System;
using Newtonsoft.Json;
using System.IO;

namespace VKGame.Bot.Commands
{
    public class Battle : ICommand 
    {
        public string Name => "–±–æ–π";
        public string Arguments => "(), (–≤–∞—Ä–∏–∞–Ω—Ç_–≤—ã–±–æ—Ä–∞)";
        public string Caption => "–†–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—ë–≤.";
        public TypeResponse Type => TypeResponse.Text;

        public object Execute(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            if (messageArray.Length == 1)
                return GetBattleText(msg);
            else
            {
                var type = typeof(Battle);
                object obj = Activator.CreateInstance(type);
                var methods = type.GetMethods();

                foreach (var method in methods)
                {
                    var attributesCustom = Attribute.GetCustomAttributes(method);

                    foreach (var attribute in attributesCustom)
                    {
                        if (attribute.GetType() == typeof(Attributes.Trigger))
                        {

                            var myAtr = ((Attributes.Trigger)attribute);

                            if (myAtr.Name == messageArray[1])
                            {

                                object result = method.Invoke(obj, new object[] { msg });
                                return (string)result;
                            }
                        }
                    }

                }
            }
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.";
        }

        [Attributes.Trigger("–∞—Ç–∞–∫–∞")]
        public static string Attack(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            var resources = new Api.Resources(msg.PeerId);
            var user = Api.User.GetUser(msg.PeerId);
            if(user.IdBattle == 0 ) return "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫–æ–π –±–∏—Ç–≤–µ.";
            var battle = new Api.Battles(user.IdBattle);
            if(battle.UserCourse != msg.PeerId) return "‚ùå –°–µ–π—á–∞—Å —Ö–æ–¥ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.";
            int countArmy = 0;
            try 
            {
                countArmy = Int32.Parse(messageArray[2]);
            }catch (FormatException) 
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.";
            }catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ!";
            }

            string type = "";
            try {
                type = messageArray[3].ToLower();
            }catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –≤–æ–π—Å–∫–∞.";
            }
            var r = new Random();
             
            int countHP = 0;
            if(type == "—Å–æ–ª–¥–∞—Ç") 
            {
                if(countArmy > resources.Soldiery) return "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–ª–¥–∞—Ç.";
                countHP = countArmy * 10;
                var food = resources.Food;
                var soldiery = resources.Soldiery;
                resources.Soldiery = soldiery- countArmy;
                var countFoodForSoldiery = countArmy * 5;
                if (countFoodForSoldiery > food) return "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã, —á—Ç–æ–±—ã –ø—Ä–æ–∫–∞—Ä–º–∏—Ç—å –∞—Ä–º–∏—é!";
                food = food - countFoodForSoldiery;
                resources.Food = food;
            }else if( type == "—Ç–∞–Ω–∫–æ–≤") 
            {
                if(countArmy > resources.Tanks) return "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–Ω–∫–æ–≤.";
                countHP = countArmy * 100;
                var tanks = resources.Tanks;
                var water = resources.Water;
                resources.Tanks = tanks - countArmy;
                var countWaterForTanks = countArmy * 5;
                if (countWaterForTanks > resources.Water) return "‚ùå –û–ì–û! –£ –í–∞—Å –∫–æ–Ω—á–∏–ª–∞—Å—å –≤–æ–¥–∞! –ê –∫–∞–∫ —Ç–∞–Ω–∫–∏ –±—É–¥—É—Ç –µ–∑–¥–∏—Ç—å –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞-—Ç–æ???";
                water = water - countWaterForTanks;
                resources.Water = water;

            }
            else return "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä–º–∏–∏.";
            if(msg.PeerId == battle.UserOne) 
            {
                var hpUser = battle.HpTwo;
                hpUser -= countHP;
                if(hpUser < 0 || hpUser == 0) 
                {
                    var listBattles = Api.Battles.GetListBattles();
                    listBattles.Battles.Remove(battle.Id);
                    Api.Battles.SetListBattles(listBattles);
                    Notifications.EnterPaymentCard( Convert.ToInt32(battle.Price *2), msg.PeerId, "–ø–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ");
                    user.IdBattle = 0;
                    user.CountWinBattles = user.CountWinBattles +1;
                    user.CountBattles = user.CountBattles + 1;
                    Api.User.SetUser(user);
                    var userTwo = Api.User.GetUser(battle.UserTwo);
                    userTwo.IdBattle = 0;
                    userTwo.CountBattles = userTwo.CountBattles +1;
                    Api.User.SetUser(userTwo);
                    int shance = r.Next(1, 5);
                    string WinText = "‚ú®üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! –ó–∞ —ç—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ñ–æ–Ω–¥ –±–∏—Ç–≤—ã!";
                    if (shance== 4)
                    {
                        WinText += "\n üéà –í–∞–º –≤—ã–ø–∞–ª –±–∏—Ç–≤–µ–Ω–Ω—ã–π –∫–µ–π—Å!";
                        var boxes = new Api.Boxes(msg.PeerId);
                        var battleList = boxes.BattleBox;
                        battleList.Add(new Models.BattleBox());
                        boxes.BattleBox = battleList;
                    }
                    Api.MessageSend("‚ùå–ü–û–†–ê–ñ–ï–ù–ò–ï! –í–ê–° –£–ù–ò–ß–¢–û–ñ–ò–õ–ò! –í —Å–ª–µ–¥—É—é—â–µ–º –±–æ—é –í–∞–º –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!", battle.UserTwo);
                    return WinText;
                }else 
                {
                    battle.HpTwo = hpUser;
                    battle.UserCourse = battle.UserTwo;
                    Api.MessageSend($"‚ùå –í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ {countHP} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å —Ö–ø: {battle.HpTwo}. –¢–µ–ø–µ—Ä—å –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!", battle.UserTwo);
                    return $"‚úÖ –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {countHP} —É—Ä–æ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É!";
                } 
            }else if(msg.PeerId == battle.UserTwo) 
            {
                var hpUser = battle.HpOne;
                hpUser -= countHP;
                if (hpUser < 0 || hpUser == 0)
                {
                    var listBattles = Api.Battles.GetListBattles();
                    listBattles.Battles.Remove(battle.Id);
                    Api.Battles.SetListBattles(listBattles);
                    Notifications.EnterPaymentCard(Convert.ToInt32(battle.Price * 2), msg.PeerId, "–ø–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ");
                    user.CountWinBattles = user.CountWinBattles + 1;
                    user.CountBattles = user.CountBattles + 1;

                    user.IdBattle = 0;
                    Api.User.SetUser(user);
                    var userTwo = Api.User.GetUser(battle.UserOne);
                    userTwo.IdBattle = 0;
                    userTwo.CountBattles = userTwo.CountBattles + 1;
                    Api.User.SetUser(userTwo);
                    int shance = r.Next(1, 5);
                    string WinText = "‚ú®üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! –ó–∞ —ç—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ñ–æ–Ω–¥ –±–∏—Ç–≤—ã!";
                    if (shance == 4)
                    {
                        WinText += "\n üéà –í–∞–º –≤—ã–ø–∞–ª –±–∏—Ç–≤–µ–Ω–Ω—ã–π –∫–µ–π—Å!";
                        var boxes = new Api.Boxes(msg.PeerId);
                        var battleList = boxes.BattleBox;
                        battleList.Add(new Models.BattleBox());
                        boxes.BattleBox = battleList;
                    }
                    Api.MessageSend("‚ùå –ü–û–†–ê–ñ–ï–ù–ò–ï! –í–ê–° –£–ù–ò–ß–¢–û–ñ–ò–õ–ò!  –í —Å–ª–µ–¥—É—é—â–µ–º –±–æ—é –í–∞–º –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!", battle.UserOne);
                    return WinText;
                }else 
                {
                    battle.UserCourse = battle.UserOne;
                    battle.HpOne = hpUser;
                    Api.MessageSend($"‚ùå –í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ {countHP} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å —Ö–ø: {battle.HpOne} –¢–µ–ø–µ—Ä—å –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å!", battle.UserOne);
                    return $"‚úÖ –í—ã –Ω–∞–Ω–µ—Å–ª–∏ {countHP} —É—Ä–æ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É!";           
                } 
            }
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. (–û–®–ò–ë–ö–ê –ï–†–†–û–† –ü–ò–ó–î–ê –í–°–ï–ú–£ –ú–ò–†–£)";
        }


        private string GetBattleText(LongPollVK.Models.AddNewMsg msg) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            return $"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\n‚úã –ü—Ä–∏–≤–µ—Ç, {user.Name}!"+
                   $"\n" +
                   $"\n‚öî –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ–π - –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –±–æ—ë–≤! –ù–∞–ø–∏—à–∏: –±–æ–π —Å–ø–∏—Å–æ–∫" +
                   $"\nüõ° –ù–µ —Ö–æ—á–µ—à—å –≤—Å—Ç—É–ø–∞—Ç—å –≤ –±–æ–π? –°–æ–∑–¥–∞–π —Å–≤–æ–π! –ù–∞–ø–∏—à–∏: –±–æ–π —Å–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ"+
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ";

        }

        [Attributes.Trigger("–≤—Å—Ç—É–ø–∏—Ç—å")]
        public static string JoinToBattle(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            var idBattle = 0;
            try {
                 idBattle = Convert.ToInt32(messageArray[2]);
            }catch(FormatException) {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID";
            }catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID";
            }
            if(!Api.Battles.Check(idBattle)) return "‚ùå –¢–∞–∫–æ–π –±–∏—Ç–≤—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
            var battle = new Api.Battles(idBattle);
            var user = Api.User.GetUser(msg.PeerId);
            var resources = new Api.Resources(msg.PeerId);
            var builds = new Api.Builds(msg.PeerId);
            if(battle.Creator == msg.PeerId) return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–≤–æ—é –∂–µ –±–∏—Ç–≤—É.";
            if(user.IdBattle != 0) return "‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–π –±–∏—Ç–≤–µ.";
            
                if(battle.IsStart) return "‚ùå –≠—Ç–∞ –±–∏—Ç–≤–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤ –Ω–µ—ë –≤—Å—Ç—É–ø–∏—Ç—å.";
                if(battle.Id == Convert.ToInt64(idBattle)) 
                {
                    if(resources.MoneyCard < battle.Price) return "‚ùå –ù–∞ –í–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.";
                    Notifications.RemovePaymentCard(Convert.ToInt32(battle.Price), msg.PeerId, "–±–∏—Ç–≤—ã");
                    user.IdBattle = battle.Id;
                    if(!Api.User.SetUser(user)) return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î. –í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –∫ –±–∏—Ç–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
                    var userHp = (builds.Apartments * 10) + (builds.Eatery * 10) + 
                    (builds.Hangars * 50) + (builds.Mine * 10) + (builds.PowerGenerators * 50) + 
                    (builds.WarehouseEat * 30) + (builds.WarehouseEnergy * 20) + 
                    (builds.WarehouseWater * 10) + (builds.WaterPressureStation * 50) +
                    (user.Level * 100);
                    battle.UserTwo = msg.PeerId;
                    battle.HpTwo = userHp;
                    battle.IsStart = true;
                    var listBattle = Api.Battles.GetListBattles();
                    listBattle.Battles.Remove(battle.Id);
                    Api.Battles.SetListBattles(listBattle);
                    Api.MessageSend("‚Äº –ö –í–∞–º –≤ –±–∏—Ç–≤—É –≤—Å—Ç—É–ø–∏–ª–∏! –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –ø–µ—Ä–≤—ã–π!", battle.Creator);
                    return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —ç—Ç—É –±–∏—Ç–≤—É! –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤—ã–π.";
                }
            

            return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π ID";
        }

        [Attributes.Trigger("–ø–æ–∫–∏–Ω—É—Ç—å")]
        public static string Leave(LongPollVK.Models.AddNewMsg msg) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            if(user.IdBattle == 0) return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –∫–∞–∫–æ–π –±–∏—Ç–≤–µ.";
            var battle = new Api.Battles(user.IdBattle);
            var listBattles = Api.Battles.GetListBattles();
            listBattles.Battles.Remove(battle.Id);
            Api.Battles.SetListBattles(listBattles);
            user.IdBattle = 0;
            Api.User.SetUser(user);
            
            long userwo = 0 ;
            if(battle.UserOne == msg.PeerId) userwo = battle.UserTwo;
            else if(battle.UserTwo == msg.PeerId) userwo = battle.UserOne;
            
            if(userwo != 0) 
            {
                var userTwo = Api.User.GetUser(userwo);
                userTwo.IdBattle = 0;
                Api.User.SetUser(userTwo);
                Notifications.EnterPaymentCard(System.Convert.ToInt32(battle.Price * 2), userwo, "–ü–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ");
                Api.MessageSend("–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ç—Ä—É—Å–ª–∏–≤–æ —Å–±–µ–∂–∞–ª! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–µ—Å—å —Ñ–æ–Ω–¥!", userwo);
            }
            return "‚ùå –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –±–∏—Ç–≤—É :( –ü–ª–æ—Ö–æ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å!";
        }

        [Attributes.Trigger("–º–æ–π")]
        public static string MyBattle(LongPollVK.Models.AddNewMsg msg) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            if(user.IdBattle == 0) return "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –∫–∞–∫–æ–π –±–∏—Ç–≤–µ.";
            var battle = new Api.Battles(user.IdBattle);

            string result = $"‚öî –ë–∏—Ç–≤–∞ ‚Ññ{battle.Id}.\n –ù–∞–∑–≤–∞–Ω–∏–µ: {battle.Body}." +
                          $"\nüòÄ –°–æ–∑–¥–∞—Ç–µ–ª—å: {user.Name}" +
                          $"\nüîù –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {user.Level}" +
                          $"\nüõ° HP –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {battle.HpOne}" +
                          $"\nüí∞ –°—Ç–∞–≤–∫–∞: {battle.Price}";

            return result;
        }

        [Attributes.Trigger("—Å–æ–∑–¥–∞—Ç—å")]
        public static string CreateBattle(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');

            var price = 0;
            try {
                price = Convert.ToInt32(messageArray[2]);
            } catch(FormatException) {
                return "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É.";
            } catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ü–µ–Ω—É.";
            }
            string body = "";
            try {
                for (int i = 3; messageArray.Length > i; i++)
                {
                    body += $"{messageArray[i]} ";
                }
            }catch(IndexOutOfRangeException) 
            {
                body = "–ë–æ–π –Ω–∞ —Å–º–µ—Ä—Ç—å";
            }             

            var resources = new Api.Resources(msg.PeerId);
            var user = Api.User.GetUser(msg.PeerId);
            user.CountCreateBattles = user.CountCreateBattles +1;
            if (user.IdBattle != 0) return "‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–π –±–∏—Ç–≤–µ.";
            if(resources.MoneyCard < price) return "‚ùå –í—ã —Å—Ç–∞–≤–∏—Ç–µ –¥–µ–Ω–µ–≥ –±–æ–ª—å—à–µ, —á–µ–º —É –í–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.";
            long userHp = 0;
            var builds = new Api.Builds(msg.PeerId);
            userHp = (builds.Apartments * 10) + (builds.Eatery * 10) + (builds.Hangars * 50) +
            (builds.Mine * 10) + (builds.PowerGenerators * 50) + (builds.WarehouseEat * 30) +
            (builds.WarehouseEnergy * 20) + (builds.WarehouseWater * 10) +
            (builds.WaterPressureStation * 50) + (user.Level * 100);
            var battleId = Api.Battles.NewBattle(msg.PeerId, body, userHp, price);
            var ListBattles = Api.Battles.GetListBattles();
            if(ListBattles.Battles == null) ListBattles.Battles = new System.Collections.Generic.List<long>();
            ListBattles.Battles.Add(battleId);
            Api.Battles.SetListBattles(ListBattles);
            Notifications.RemovePaymentCard(price, msg.PeerId, "–°–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–≤—ã");
            user.IdBattle = battleId;
            if(!Api.User.SetUser(user)) return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î. –ù–æ –±–∏—Ç–≤–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å –Ω–∞–≤–µ—Ä–Ω–æ–µ. –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –±–∏—Ç–≤—É. –ò –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å.";
            return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –±–∏—Ç–≤—É! –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.";
        }

        [Attributes.Trigger("—Å–ø–∏—Å–æ–∫")]
        public static string ListBattles(LongPollVK.Models.AddNewMsg msg) 
        {
            string json =  "";
            using(var reader = new StreamReader(@"Files/Battles.json")) 
            {
                json = reader.ReadToEnd();
            }
            var model = JsonConvert.DeserializeObject<Models.ActiveBattles>(json);

            string result = "C–ü–ò–°–û–ö –ë–ò–¢–í‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
            if(model.Battles.Count == 0) return "–°–ø–∏—Å–æ–∫ –±–∏—Ç–≤ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –±–∏—Ç–≤—É!";
            foreach(var battleId in model.Battles) 
            {
                var battle = new Api.Battles(battleId);
                var user = Api.User.GetUser(battle.Creator);
                result +=   $"‚öî –ë–∏—Ç–≤–∞ ‚Ññ{battle.Id}.\n ‚ñ∂ –ù–∞–∑–≤–∞–Ω–∏–µ: {battle.Body}."+
                          $"\nüßë –°–æ–∑–¥–∞—Ç–µ–ª—å: {user.Name}"+
                          $"\nüîù –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {user.Level}"+
                          $"\nüõ° HP –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {battle.HpOne}"+
                          $"\nüí∞ –°—Ç–∞–≤–∫–∞: {battle.Price}"+
                          $"\nüí• –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ —ç—Ç—É –±–∏—Ç–≤—É, –Ω–∞–ø–∏—à–∏—Ç–µ: –±–æ–π –≤—Å—Ç—É–ø–∏—Ç—å {battle.Id}"+
                          $"\n"+
                          $"\n";
                          
            }
            result+= "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ";
            return result;
        }
    }
}