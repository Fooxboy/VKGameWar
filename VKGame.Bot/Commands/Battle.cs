using System;
using Newtonsoft.Json;
using System.IO;
using System.Collections.Generic;
using System.Threading.Tasks;
using VKGame.Bot.Api;

namespace VKGame.Bot.Commands
{
    public class Battle : ICommand
    {
        public override string Name => "–ë–æ–π";
        public override string Arguments => "(), (–≤–∞—Ä–∏–∞–Ω—Ç_–≤—ã–±–æ—Ä–∞)";
        public override string Caption => "–†–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—ë–≤.";
        public override TypeResponse Type => TypeResponse.Text;
        public override string HelpUrl => "—Å—Å–ª—ã–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";

        public override List<string>  Commands =>
            new List<string>() {"–±–æ—Ç", "–∞—Ç–∞–∫–∞", "–≤—Å—Ç—É–ø–∏—Ç—å", "–ø–æ–∫–∏–Ω—É—Ç—å", "–º–æ–π", "—Å–æ–∑–¥–∞—Ç—å", "—Å–ø–∏—Å–æ–∫"};

        public override Access Access => Access.User;


        public override object Execute(Models.Message msg)
        {
            var messageArray = msg.body.Split(' ');
            if (messageArray.Length == 1)
                return GetBattleText();
            var result = Helpers.Command.CheckMethods(typeof(Battle), messageArray[1], msg);
            if (result != null) return result;
            var word = Common.SimilarWord(messageArray[1], Commands);
            return $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞." +
                   $"\n ‚ùì –í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É - {Name} {word}";
        }

        public static class API
        {
            public static long HpUser(long userId)
            {
                var builds = new Api.Builds(userId);
                var levels = new Api.Levels(userId);
                var user = new Api.User(userId);
                var hp = (builds.Apartments * 10) + (builds.Eatery * 10) +
                         (builds.Hangars * 30) + (builds.PowerGenerators * 30) +
                         (builds.WarehouseEat * 30) + (builds.WarehouseEnergy * 30) +
                         (builds.WaterPressureStation * 30) + (user.Level * 100) +
                         (levels.Apartments * 10) + (levels.Eatery * 10) +
                         (levels.Hangars * 10) + (levels.PowerGenerators * 10) +
                         (levels.Soldiery * 100) + (levels.Tanks * 100) +
                         (levels.WarehouseEat * 10) + (levels.WarehouseEnergy * 100) +
                         (levels.WarehouseWater * 10) + (levels.WaterPressureStation * 10);
                return hp;
            }

            public static void JoinToBattle(long userId, long idBattle)
            {
                Statistics.JoinBattle();
                var battle = new Api.Battles(idBattle);
                if(battle.Type == 1)
                {
                    var user = new User(userId);
                    var registry = new Api.Registry(userId);
                    user.BattleId = idBattle;
                    registry.CountBattles += 1;
                    battle.AddMember(userId, API.HpUser(userId));
                    battle.Found *= 2;
                    battle.IsStart = true;
                }else if(battle.Type == 2)
                {
                    var user = new User(userId);
                    var registry = new Api.Registry(userId);
                    user.BattleId = idBattle;
                    registry.CountBattles += 1;
                    battle.AddMember(userId, API.HpUser(userId));
                    battle.Found *= 2;
                    battle.IsStart = true;
                }
                else if(battle.Type == 3)
                {
                    battle.AddMember(0, API.HpUser(userId));
                    battle.Found *= 2;
                    battle.IsStart = true;
                }
                
            }

            public const long SoldieryHp = 100;
            
            public const long TanksHp = 200;

            public const long OneLvlSoldiery = 50;

            public const long OneLevlTanks = 50;

            public const long ResourceSoldiery = 5;

            public const long ResourceTanks = 5;

            public static void EndBattle(long battleId, long winner)
            {
                var battle = new Api.Battles(battleId);

                if(battle.Type != 3)
                {
                    foreach (var member in battle.Members)
                    {
                        var user = new User(member.Key);
                        user.BattleId = 0;
                        if (member.Key == winner)
                        {
                            user.Experience += 10;
                            var registry = new Api.Registry(member.Key);
                            registry.CountWinBattles += 1;
                        }
                    }
                }
                
                battle.IsActive = false;

                new Task(() =>
                    Api.Message.Send($"üí£ –ü–û–ë–ï–î–ê! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ —ç—Ç–æ–º –±–æ—é! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ñ–æ–Ω–¥ –±–∏—Ç–≤—ã: {battle.Found} üí≥", winner)).Start();
                Notifications.EnterPaymentCard(Convert.ToInt32(battle.Found), winner, "–ø–æ–±–µ–¥–∞ –≤ –±–∏—Ç–≤–µ");
            }
            
            public static long Create(long userId, string nameBattle, long price)
            {
                var user = new User(userId);
                var registry = new Registry(userId);
                registry.CountBattles += 1;
                registry.CountCreateBattles += 1;
                var id = Battles.Create(nameBattle, userId, price, HpUser(userId));
                user.BattleId = id;
                return id;
            }

            public static void BotAttack(long userId)
            {
                var user = new User(userId);
                var battleId = user.Id;
                var battle = new Battles(battleId);

                var choise = new Random().Next(1, 4);
                if (choise == 1)
                {
                    var typeBuilds = string.Empty;
                    var buildsVrag = new Builds(userId);
                    var lol = new Random().Next(1, 9);
                    if (lol == 1)
                    {
                        buildsVrag.Apartments -= 1;
                        typeBuilds = "–ñ–∏–ª–æ–π –¥–æ–º";
                    }
                    else if (lol == 2)
                    {
                        buildsVrag.Eatery -= 1;
                        typeBuilds = "–°—Ç–æ–ª–æ–≤—É—é";
                    }
                    else if (lol == 3)
                    {
                        buildsVrag.Hangars -= 1;
                        typeBuilds = "–ê–Ω–≥–∞—Ä";
                    }
                    else if (lol == 4)
                    {
                        buildsVrag.PowerGenerators -= 1;
                        typeBuilds = "–≠–Ω–µ—Ä–≥–æ—Å—Ç–∞–Ω–∏—Ü–∏—é";
                    }
                    else if (lol == 5)
                    {
                        buildsVrag.WarehouseEat -= 1;
                        typeBuilds = "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫";
                    }
                    else if (lol == 6)
                    {
                        buildsVrag.WarehouseEnergy -= 1;
                        typeBuilds = "–ë–∞—Ç–∞—Ä–µ—é";
                    }
                    else if (lol == 7)
                    {
                        buildsVrag.WarehouseWater -= 1;
                        typeBuilds = "–ë–æ—á–∫—É —Å –≤–æ–¥–æ–π";
                    }
                    else if (lol == 8)
                    {
                        buildsVrag.WaterPressureStation -= 1;
                        typeBuilds = "–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é –±–∞—à–Ω—é";
                    }

                    new Task(() => Api.Message.Send($"üí£ –£–ø—Å! –í–∞–º –±–æ—Ç –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é! –ò –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {typeBuilds}." +
                                                    "\n‚ùì –ï—Å–ª–∏ —É –í–∞—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π - 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ —Å–∫–æ—Ä–µ–µ –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ!" +
                                                    "\n‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", user.Id)).Start();
                }else if(choise ==2)
                {
                    new Task(() =>
                  Api.Message.Send($"ü§£ –•–∞-—Ö–∞-—Ö–∞!–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –≤ –í–∞—Å –ø–æ–ø–∞—Å—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!" +
                                   $"\n ‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", userId)).Start();
                    
                }else if(choise == 3)
                {
                    int count = new Random().Next(5, 16);
                    var levels = new Levels(user.Id);
                    long coutHpArmy = 0;
                    coutHpArmy += count * API.SoldieryHp;
                    coutHpArmy += levels.Soldiery * API.OneLvlSoldiery;
                    var members = battle.Members;
                    var hp = members[userId] - coutHpArmy;
                    battle.SetHp(userId, hp);

                    if(hp <0 || hp == 0)
                    {
                        new Task(() =>
                        Message.Send("üò≠ –í–∞—Å —Ä–∞–∑–≥—Ä–∞–º–∏–ª–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤–µ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!", userId)).Start();
                        user.BattleId = 0;
                    }else
                    {
                        new Task(() => Api.Message.Send($"üí£ –í–ê–ú –ù–ê–ù–ï–°–Å–ù –£–î–ê–†! –£—Ä–æ–Ω: {coutHpArmy}" +
                                               $"\n ‚ù§ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: [{hp}/{API.HpUser(userId)}]" +
                                               $"\n ‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", userId)).Start();
                    }

                   
                }

            }

            public static long ChoiseUser(long user1, long user2)
            {
                var skills1 = new Api.Skills(user1);
                var skills2 = new Api.Skills(user2);
                var r = new Random();

                if (skills1.Fortuna == skills2.Fortuna)
                {
                    int choise = r.Next(1, 3);
                    if (choise == 1) return user1;
                    else if (choise == 2) return user2;
                }
                
                if (skills1.Fortuna > skills2.Fortuna)
                {
                    var choise = r.Next(1, 4);
                    if (choise == 2) return user2;
                    else return user1;
                }
                else
                {
                    var choise = r.Next(1, 4);
                    if (choise == 2) return user1;
                    else return user2;
                }
            } 
        }

        [Attributes.Trigger("–±–æ—Ç")]
        public static string BattleBot(Models.Message msg)
        {
            var messageArray = msg.body.Split(' ');
            var user = new User(msg.from_id);
            if (user.BattleId != 0)
                return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–∏—Ç–≤—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É—Ç–µ –≤ –¥—Ä—É–≥–æ–π –±–∏—Ç–≤–µ.";
            int price;
            try
            {
                price = Int32.Parse(messageArray[2]);
            }catch(FormatException) { return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!"; }
            catch(IndexOutOfRangeException) { return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: –ë–æ–π –±–æ—Ç 1234"; }

            if (!Notifications.RemovePaymentCard(price, user.Id, "–±–æ–π —Å –±–æ—Ç–æ–º"))
                return $"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –í–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–æ–π —Å—É–º–º—ã –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {price}";
            var battleId = API.Create(user.Id, $"Bot vs {user.Name}", price);

            var battle = new Battles(battleId);
            battle.Type = 3;
            API.JoinToBattle(0, battle.Id);
            battle.UserAttack = user.Id;

            return $"üèπ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –±–∏—Ç–≤—É —Å –±–æ—Ç–æ–º! –ê—Ç–∞–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –±–æ–µ.";
        }

        
        [Attributes.Trigger("–∞—Ç–∞–∫–∞")]
        public static string AttackToBattle(Models.Message msg)
        {
            var messageArray = msg.body.Split(' ');
            var typeArmy = String.Empty;
            long count = 0;
            try
            {
                count = Int64.Parse(messageArray[2]);
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–º–∏–∏. –ü—Ä–∏–º–µ—Ä: –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –∞—Ä–º–∏–∏> ";
            }
            catch (FormatException)
            {
                return "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–º–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.";
            }

            try
            {
                typeArmy = messageArray[3];
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –∞—Ä–º–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: –¢–∞–Ω–∫–æ–≤, –°–æ–ª–¥–∞—Ç";
            }
            
            var user = new Api.User(msg.from_id);

            if (user.BattleId == 0) return "‚ùå –í—ã –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫–æ–π –±–∏—Ç–≤–µ.";
            
            var battle = new Api.Battles(user.BattleId);
            var skills = new Api.Skills(user.Id);
            var resources = new Api.Resources(msg.from_id);
            long countHpArmy = 0;
            long countResoures = 0;
            string typeResourses = String.Empty;
            var levels = new Levels(msg.from_id);
            
            if (typeArmy.ToLower() == "—Å–æ–ª–¥–∞—Ç")
            {
                if (resources.Soldiery < count) return "‚ùå –£ –í–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–ª–¥–∞—Ç.";
                countHpArmy += count * API.SoldieryHp;
                countHpArmy +=  levels.Soldiery * API.OneLvlSoldiery;
                countResoures += count * API.ResourceSoldiery;
                typeResourses = "üçï";
                if (resources.Food < countResoures)
                    return
                        "‚ùå –£ –í–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –µ–¥—ã, —á—Ç–æ–±—ã –ø—Ä–æ–∫–æ—Ä–º–∏—Ç—å –∞—Ä–º–∏—é. –ö—É–ø–∏—Ç–µ –µ–¥—ã –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∞ —Å–∞–º–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å—Å—è";
                resources.Food -= countResoures;

            }else if (typeArmy.ToLower() == "—Ç–∞–Ω–∫–æ–≤")
            {
                if (resources.Tanks < count) return "‚ùå –£ –í–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–Ω–∫–æ–≤.";
                countHpArmy += count * API.TanksHp;
                countHpArmy += levels.Tanks * API.OneLevlTanks;
                countResoures += count * API.ResourceTanks;
                typeResourses = "üíß";
                if (resources.Water < countResoures)
                    return
                        "‚ùå –£ –í–∞—Å –Ω–µ—Ö–≤–∞—Ç–∞–µ—Ç –≤–æ–¥—ã, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ —Ç–∞–Ω–∫–∏. –ö—É–ø–∏—Ç–µ –≤–æ–¥—É –≤ –º–∞–≥–∞–∑–∏–µ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∞ —Å–∞–º–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å—Å—è";
                resources.Water -= countResoures;
            }
            else return "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞—Ä–º–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –°–æ–ª–¥–∞—Ç, —Ç–∞–Ω–∫–æ–≤";

            var members = battle.Members;

            if (battle.UserAttack != msg.from_id)
                return "‚ùå –°–µ–π—á–∞—Å –æ—á–µ—Ä–µ–¥—å –∞—Ç–∞–∫–∏ –í–∞—à–µ–≥–æ –≤—Ä–∞–≥–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ —Ö–æ–¥–∞.";

            if (!battle.IsStart)
                return "‚ùå –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –ø–æ–∫–∞ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è.";

            long vrag = 0;

            foreach (var member in members)
            {
                if (member.Key != msg.from_id) vrag = member.Key;
            }

            User userVrag = null;
            Api.Skills skillsVrag = null ;

            if(battle.Type == 1)
            {
                 userVrag = new Api.User(vrag);
                 skillsVrag = new Api.Skills(vrag);
            }else if(battle.Type == 2)
            {
                userVrag = new User(vrag);
                skillsVrag = new Api.Skills(vrag);
            }else if(battle.Type == 3)
            {
                userVrag = new Api.User(msg.from_id);
                skillsVrag = new Api.Skills(msg.from_id);
            }else
            {
                userVrag = new Api.User(msg.from_id);
                skillsVrag = new Api.Skills(msg.from_id);
            }
            

            var resourcesStr = $"‚ùó –ù–∞ –∞—Ç–∞–∫—É –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏: {countResoures} {typeResourses}";
            var myHp = $"‚ù§ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: [{members[msg.from_id]}/{API.HpUser(msg.from_id)}]";
            
            
            var r = new Random();
            int chaise = r.Next(1, 4);
            
            if (skills.Fortuna > skillsVrag.Fortuna)
            {
                if (chaise == 2)
                {
                    chaise = r.Next(1, 4);
                    if (chaise == 2)
                    {
                        if (user.Level < userVrag.Level)
                        {
                            chaise = r.Next(1, 3);
                        }
                    }else if (chaise == 1)
                    {
                        if (user.Level < userVrag.Level)
                        {
                            var lol = r.Next(1, 5);
                            if (lol == 4) chaise = 3;
                        }
                    }
                }else if (chaise == 1)
                {
                    var lol = r.Next(1, 6);
                    if (lol == 3) chaise = 3;
                    else
                    {
                        if (user.Level < userVrag.Level)
                        {
                            var kek = r.Next(1, 5);
                            if (kek == 4) chaise = 3;
                        }
                    }
                }
            }else if (skills.Fortuna == skillsVrag.Fortuna)
            {
                chaise = r.Next(1, 4);
            }else if (skills.Fortuna < skillsVrag.Fortuna)
            {
                var loh = r.Next(1, 5);
                if (loh == 1) chaise = 1;
                if (loh == 2) chaise = 2;
                if (loh == 3) chaise = 2;
                if (loh == 4) chaise = 3;
            }
            
            if (chaise == 1)
            {
                string typeBuilds = String.Empty;
                
                var kek = r.Next(1, 4);
                if (kek == 2)
                {
                    if(battle.Type == 1)
                    {
                        var buildsVrag = new Builds(vrag);
                        var lol = r.Next(1, 9);
                        if (lol == 1)
                        {
                            buildsVrag.Apartments -= 1;
                            typeBuilds = "–ñ–∏–ª–æ–π –¥–æ–º";
                        }
                        else if (lol == 2)
                        {
                            buildsVrag.Eatery -= 1;
                            typeBuilds = "–°—Ç–æ–ª–æ–≤—É—é";
                        }
                        else if (lol == 3)
                        {
                            buildsVrag.Hangars -= 1;
                            typeBuilds = "–ê–Ω–≥–∞—Ä";
                        }
                        else if (lol == 4)
                        {
                            buildsVrag.PowerGenerators -= 1;
                            typeBuilds = "–≠–Ω–µ—Ä–≥–æ—Å—Ç–∞–Ω–∏—Ü–∏—é";
                        }
                        else if (lol == 5)
                        {
                            buildsVrag.WarehouseEat -= 1;
                            typeBuilds = "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫";
                        }
                        else if (lol == 6)
                        {
                            buildsVrag.WarehouseEnergy -= 1;
                            typeBuilds = "–ë–∞—Ç–∞—Ä–µ—é";
                        }
                        else if (lol == 7)
                        {
                            buildsVrag.WarehouseWater -= 1;
                            typeBuilds = "–ë–æ—á–∫—É —Å –≤–æ–¥–æ–π";
                        }
                        else if (lol == 8)
                        {
                            buildsVrag.WaterPressureStation -= 1;
                            typeBuilds = "–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é –±–∞—à–Ω—é";
                        }

                        new Task(() => Api.Message.Send($"üí£ –£–ø—Å! –í–∞–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é! –ò –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {typeBuilds}." +
                                                        "\n‚ùì –ï—Å–ª–∏ —É –í–∞—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π - 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ —Å–∫–æ—Ä–µ–µ –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ!" +
                                                        "\n‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", vrag)).Start();
                    }else if(battle.Type == 2)
                    {
                        var buildsVrag = new Builds(vrag);
                        var lol = r.Next(1, 9);
                        if (lol == 1)
                        {
                            buildsVrag.Apartments -= 1;
                            typeBuilds = "–ñ–∏–ª–æ–π –¥–æ–º";
                        }
                        else if (lol == 2)
                        {
                            buildsVrag.Eatery -= 1;
                            typeBuilds = "–°—Ç–æ–ª–æ–≤—É—é";
                        }
                        else if (lol == 3)
                        {
                            buildsVrag.Hangars -= 1;
                            typeBuilds = "–ê–Ω–≥–∞—Ä";
                        }
                        else if (lol == 4)
                        {
                            buildsVrag.PowerGenerators -= 1;
                            typeBuilds = "–≠–Ω–µ—Ä–≥–æ—Å—Ç–∞–Ω–∏—Ü–∏—é";
                        }
                        else if (lol == 5)
                        {
                            buildsVrag.WarehouseEat -= 1;
                            typeBuilds = "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫";
                        }
                        else if (lol == 6)
                        {
                            buildsVrag.WarehouseEnergy -= 1;
                            typeBuilds = "–ë–∞—Ç–∞—Ä–µ—é";
                        }
                        else if (lol == 7)
                        {
                            buildsVrag.WarehouseWater -= 1;
                            typeBuilds = "–ë–æ—á–∫—É —Å –≤–æ–¥–æ–π";
                        }
                        else if (lol == 8)
                        {
                            buildsVrag.WaterPressureStation -= 1;
                            typeBuilds = "–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é –±–∞—à–Ω—é";
                        }

                        new Task(() => Api.Message.Send($"üí£ –£–ø—Å! –í–∞–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é! –ò –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {typeBuilds}." +
                                                        "\n‚ùì –ï—Å–ª–∏ —É –í–∞—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π - 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, —Ç–æ —Å–∫–æ—Ä–µ–µ –∫—É–ø–∏—Ç–µ –Ω–æ–≤—ã–µ!" +
                                                        "\n‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", vrag)).Start();
                    }else if(battle.Type == 3)
                    {

                    }
                    
                    if(battle.Type == 1 || battle.Type == 2)
                    {
                        battle.UserAttack = vrag;
                        return $"üëç –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –í—ã –Ω–∞–Ω–µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –∏ –∑–∞–±—Ä–∞–ª–∏ —É –≤—Ä–∞–≥–∞ {typeBuilds}! –ö–∞–∂–µ—Ç—Å—è, –∫–æ–º—É-—Ç–æ —Å–∫–æ—Ä–æ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ:)" +
                          $"\n {resourcesStr}" +
                          $"\n {myHp}";
                    }else
                    {
                        API.BotAttack(user.Id);
                        return $"üëç –û—Ç–ª–∏—á–Ω—ã–π —É–¥–∞—Ä! –í—ã –Ω–∞–Ω–µ—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω –∏ –∑–∞–±—Ä–∞–ª–∏ —É –±–æ—Ç–∞ –æ–¥–Ω–æ –∑–¥–∞–Ω–∏–µ!" +
                            $"\n {resourcesStr}" +
                            $"\n {myHp}";
                    }               
                }
                
                if(kek == 1 || kek ==3)
                {
                    if(battle.Type ==1 || battle.Type ==2)
                    {
                        new Task(() =>
                       Message.Send($"üí£ –í–æ—É-–í–æ—É! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –í–∞–º –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω –ø–æ –∑–¥–∞–Ω–∏—é! –ó–¥–æ—Ä–æ–≤—å–µ –∑–¥–∞–Ω–∏–π —É–º–µ–Ω—å—à–µ–ª–æ—Å—å!" +
                                        $"\n‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", vrag)).Start();
                        battle.UserAttack = vrag;
                        return $"‚öî –ù—É –ø–æ—á—Ç–∏.. –¢—ã –ø–æ–ø–∞–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –≤ –∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–Ω—ë—Å –ø–æ –Ω–µ–º —É—Ä–æ–Ω!" +
                               $"\n{resourcesStr}" +
                               $"\n {myHp}";
                    }else
                    {
                        return $"‚öî –ù—É –ø–æ—á—Ç–∏.. –¢—ã –ø–æ–ø–∞–ª –±–æ—Ç—É –≤ –∑–¥–∞–Ω–∏–µ –∏ –Ω–∞–Ω—ë—Å –ø–æ –Ω–µ–º —É—Ä–æ–Ω!" +
                               $"\n{resourcesStr}" +
                               $"\n {myHp}";
                    }

                }
            }

            if (chaise == 2)
            {

                if(battle.Type == 1 || battle.Type == 2)
                {
                    new Task(() =>
                   Api.Message.Send($"ü§£ –•–∞-—Ö–∞-—Ö–∞! –í–∞—à –≤—Ä–∞–≥ –Ω–µ —Å–º–æ–≥ –≤ –í–∞—Å –ø–æ–ø–∞—Å—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!" +
                                    $"\n ‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", vrag)).Start();
                    battle.UserAttack = vrag;
                    return $"üò¢ –ù—É—É –±—ã–ª–æ –±–ª–∏–∑–∫–æ! –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑." +
                           $"\n {resourcesStr}" +
                           $"\n {myHp}";
                }else
                {
                    API.BotAttack(user.Id);
                    return $"üò¢ –ù—É—É –±—ã–ª–æ –±–ª–∏–∑–∫–æ! –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑." +
                          $"\n {resourcesStr}" +
                          $"\n {myHp}";
                }        
            }

            if (chaise == 3)
            {
                var hpVrag = members[vrag] - countHpArmy;
                if (hpVrag < 0 || hpVrag == 0)
                {
                    //player win

                    if (battle.Type == 1)
                    {
                        var registryVrag = new Registry(vrag);
                        registryVrag.CountLoserBattle += 1;

                        new Task(() =>
                        Api.Message.Send("üò≠ –í–∞—Å —Ä–∞–∑–≥—Ä–∞–º–∏–ª–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤–µ –ø–æ–≤–µ–∑—ë—Ç –±–æ–ª—å—à–µ!", vrag)).Start();
                        API.EndBattle(battle.Id, msg.from_id);
                        return resourcesStr;

                    }
                    else if (battle.Type == 2)
                    {
                        var registryVrag = new Registry(vrag);
                        registryVrag.CountLoserBattle += 1;

                    }
                    else if (battle.Type == 3)
                    {
                        API.EndBattle(battle.Id, msg.from_id);
                    }
                }

                battle.SetHp(vrag, hpVrag);

                if(battle.Type == 3)
                {
                    API.BotAttack(user.Id);
                    return $"‚ú® –ü—Ä—è–º–æ  –≤ —è–±–ª–æ—á–∫–æ! –í—ã –Ω–∞–Ω–µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É {countHpArmy} —É—Ä–æ–Ω–∞!" +
                       $"\n {resourcesStr}" +
                       $"\n {myHp}";
                }

                new Task(() => Api.Message.Send($"üí£ –í–ê–ú –ù–ê–ù–ï–°–Å–ù –£–î–ê–†! –£—Ä–æ–Ω: {countHpArmy}" +
                                                $"\n ‚ù§ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: [{hpVrag}/{API.HpUser(vrag)}]" +
                                                $"\n ‚ùó –°–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ: –±–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –≤–æ–π—Å–∫–∞>", vrag)).Start();

                battle.UserAttack = vrag;
                return $"‚ú® –ü—Ä—è–º–æ  –≤ —è–±–ª–æ—á–∫–æ! –í—ã –Ω–∞–Ω–µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É {countHpArmy} —É—Ä–æ–Ω–∞!" +
                       $"\n {resourcesStr}" +
                       $"\n {myHp}";
            }
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏. –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.";
        }
        
        [Attributes.Trigger("–ø–æ–∫–∏–Ω—É—Ç—å")]
        public static string LeaveToBattle(Models.Message msg)
        {
            var user = new Api.User(msg.from_id);
            if (user.BattleId == 0) return "‚ùå –í—ã –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –±–∏—Ç–≤–µ.";

            var battle = new Api.Battles(user.BattleId);

            if (!battle.IsStart)
            {
                battle.IsActive = false;
                user.BattleId = 0;
                return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –±–æ–π.";
            }
            var members = battle.Members;
            long winner = 0;
            
            foreach (var member in members)
            {
                if (member.Key != msg.from_id) winner = member.Key;
            }
            
            new Task(()=> Api.Message.Send("üòé  –í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –±–æ–π! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–µ—Å—å —Ñ–æ–Ω–¥ –±–∏—Ç–≤—ã.", winner)).Start();
            
            API.EndBattle(user.BattleId, winner);             
            return "üò¢ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –±–æ–π. –í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.";
        }

        [Attributes.Trigger("–º–æ–π")]
        public static string MyBattle(Models.Message msg)
        {
            var userO = new Api.User(msg.from_id);
            if (userO.BattleId == 0) return "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –∫–∞–∫–æ–π –±–∏—Ç–≤–µ!";

            var battle = new Api.Battles(userO.BattleId);
            
            var membersString = String.Empty;
            foreach (var member in battle.Members)
            {
                var user = new Api.User(member.Key);
                membersString += $"\n üòÄ –ò–º—è: [id{user.Id}|{user.Name}]" +
                                 $"\n üîù –£—Ä–æ–≤–µ–Ω—å: {user.Level}" +
                                 $"\n üíØ –†–µ–π—Ç–∏–Ω–≥: user.top" +
                                 $"\n";
            }
            var battleString = $"\n ‚öî –ë–ò–¢–í–ê ‚Ññ{battle.Id}" +
                          $"\n ‚û° –ù–∞–∑–≤–∞–Ω–∏–µ: {battle.Name}" +
                          $"\n üí≥ –§–æ–Ω–¥: {battle.Found}" +
                          $"\n üòé –£—á–∞—Å—Ç–Ω–∏–∫–∏:" +
                          $"{membersString}" +
                          $"\n";
            return battleString;
        }

        [Attributes.Trigger("–≤—Å—Ç—É–ø–∏—Ç—å")]
        public static string JoinToBattle(Models.Message msg)
        {
            var messageArray = msg.body.Split(' ');
            long battleId = 0;
            try
            {
                battleId = Convert.ToInt64(messageArray[2]);
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ Id –±–∏—Ç–≤—ã. –ü—Ä–∏–º–µ—Ä: –≤—Å—Ç—É–ø–∏—Ç—å 235";
            }
            catch (FormatException)
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π Id –±–∏—Ç–≤—ã. Id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏–ª–æ–º.";
            }

            var user = new Api.User(msg.from_id);
            if (user.BattleId != 0) return "‚ùå –í—ã –∏ —Ç–∞–∫ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–π –±–∏—Ç–≤–µ!";
            if (!Api.Battles.Check(battleId))
                return "‚ùå –¢–∞–∫–æ–π –±–∏—Ç–≤—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ç–≤, –Ω–∞–ø–∏—à–∏—Ç–µ: —Å–ø–∏—Å–æ–∫";
            var battle = new Api.Battles(battleId);
            if (!battle.IsActive) return "‚ùå –≠—Ç–∞ –±–∏—Ç–≤–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ—ë. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –±–∏—Ç–≤—ã, –Ω–∞–ø–∏—à–∏—Ç–µ: —Å–ø–∏—Å–æ–∫";
            if (battle.IsStart) return "‚ùå –≠—Ç–∞ –±–∏—Ç–≤–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ—ë! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –±–∏—Ç–≤—ã, –Ω–∞–ø–∏—à–∏—Ç–µ: —Å–ø–∏—Å–æ–∫";

            if (battle.Creator == msg.from_id) return "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–≤–æ—é –∂–µ –±–∏—Ç–≤—É!";


            if (!Notifications.RemovePaymentCard(Convert.ToInt32(battle.Found), msg.from_id, "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –±–∏—Ç–≤—É"))
                return $"‚ùå –£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {battle.Found} ";
            
            API.JoinToBattle(msg.from_id, battleId);
            
            new Task(()=>Api.Message.Send($"‚öî –ö –í–∞–º –≤ –±–∏—Ç–≤—É –≤—Å—Ç—É–ø–∏–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫!" +
                                          $"\n ‚ù§ –í–ê–®–ï –ó–î–û–†–û–í–¨–ï: {API.HpUser(battle.Creator)}" +
                                          $"\n üñ§ –ó–î–û–†–û–í–¨–ï –ü–†–û–¢–ò–í–ù–ò–ö–ê: {API.HpUser(msg.from_id)}", battle.Creator)).Start();
            
            new Task(()=> ChoisidBattleStart(new List<long>() {msg.from_id, battle.Creator}, battle.Id)).Start();
            return $"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–∏—Ç–≤—É. –°–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–≤—ã–π –∞—Ç–∞–∫—É–µ—Ç." +
                   $"\n ‚ù§ –í–ê–®–ï –ó–î–û–†–û–í–¨–ï: {API.HpUser(msg.from_id)}" +
                   $"\n üñ§ –ó–î–û–†–û–í–¨–ï –ü–†–û–¢–ò–í–ù–ò–ö–ê: {API.HpUser(battle.Creator)}";
        }

        private static void ChoisidBattleStart(List<long> users, long battleId)
        {
            var user = API.ChoiseUser(users[0], users[1]);
            var battle = new Api.Battles(battleId);
            battle.UserAttack = user;
            Api.Message.Send("üí£ –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –ø–µ—Ä–≤—ã–º! –°–∫–æ—Ä–µ–µ! –ë–æ–π –∞—Ç–∞–∫–∞ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ç–∏–ø –∞—Ä–º–∏–∏> ", user);
        }
        
        [Attributes.Trigger("—Å–æ–∑–¥–∞—Ç—å")]
        public static string CreateBattle(Models.Message msg)
        {
            var messageArray = msg.body.Split(' ');
            long price = 0;
            try
            {
                price = Convert.ToInt64(messageArray[2]);
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —Ü–µ–Ω—É –±–∏—Ç–≤—ã! –ü—Ä–∏–º–µ—Ä: –±–æ–π —Å–æ–∑–¥–∞—Ç—å 100 –ø–æ–ø—Ä–æ–±—É–π –º–µ–Ω—è –ø–æ–±–µ–¥–∏—Ç—å.";
            }catch(FormatException)
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Ü–µ–Ω—É! –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ß–ò–°–õ–û–ú!";
            }

            string nameBattle = String.Empty;
            try
            {
                for (var i = 3; i < messageArray.Length; i++) nameBattle += $"{messageArray[i]} ";
            }
            catch (IndexOutOfRangeException)
            {
                nameBattle = "–ë–∏—Ç–≤–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
            }

            if (nameBattle == String.Empty) nameBattle = "–ë–∏—Ç–≤–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";

            if (!Notifications.RemovePaymentCard(Convert.ToInt32(price), msg.from_id, "—Å–æ–∑–¥–∞–Ω–∏–µ –±–∏—Ç–≤—ã"))
                return $"‚ùå –£ –í–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—É–º–º—ã: {price} üí≥ ";

            var battleId = API.Create(msg.from_id, nameBattle, price);
            
            return $"‚úÖ –ë–∏—Ç–≤–∞ —É—Å–ø–µ—à–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞. Id –±–∏—Ç–≤—ã -- {battleId}";
        }


        [Attributes.Trigger("—Å–ø–∏—Å–æ–∫")]
        public static string ActiveListBattles(Models.Message msg)
        {
            var battlesStr = String.Empty;
            var battles = Api.Battles.GetActivesAll;
            foreach (var battleId in battles)
            {
                var battle = new Bot.Api.Battles(battleId);

                var membersString = String.Empty;
                foreach (var member in battle.Members)
                {
                    var user = new Api.User(member.Key);
                    membersString += $"\n üòÄ –ò–º—è: [id{user.Id}|{user.Name}]" +
                                     $"\n üîù –£—Ä–æ–≤–µ–Ω—å: {user.Level}" +
                                     $"\n ‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: {member.Value}" +
                                     $"\n üíØ –†–µ–π—Ç–∏–Ω–≥: user.top" +
                                     $"\n";
                }
                battlesStr += $"\n ‚öî –ë–ò–¢–í–ê ‚Ññ{battle.Id}" +
                              $"\n ‚û° –ù–∞–∑–≤–∞–Ω–∏–µ: {battle.Name}" +
                              $"\n üí≥ –¶–µ–Ω–∞: {battle.Found}" +
                              $"\n üòé –£—á–∞—Å—Ç–Ω–∏–∫–∏:" +
                              $"{membersString}" +
                              $"\n ‚ùì –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ: –ë–æ–π –≤—Å—Ç—É–ø–∏—Ç—å {battle.Id}" +
                              $"\n";
            }

            return $"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ" +
                   $"\n –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–ù–´–• –ë–û–Å–í" +
                   $"\n" +
                   $"\n{battlesStr}" +
                   $"\n" +
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ";
        }


        private string GetBattleText()
        {
            return "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ" +
                   "\n ‚öî –†–∞–∑–¥–µ–ª –±–∏—Ç–≤." +
                   "\n" +
                   "\n‚ùì –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–∏—Ç–≤—É –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±–∏—Ç–≤—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞." +
                   "\n " +
                   "\n ‚öî –ë–æ–π —Å–ø–∏—Å–æ–∫ -- –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏—Ç–≤." +
                   "\n ‚ú® –ë–æ–π —Å–æ–∑–¥–∞—Ç—å (—Ü–µ–Ω–∞) (–Ω–∞–∑–≤–∞–Ω–∏–µ) -- —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–∏—Ç–≤—ã." +
                   "\n üòé –ë–æ–π –≤—Å—Ç—É–ø–∏—Ç—å (ID) -- –≤—Å—Ç—É–ø–∏—Ç—å –≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –±–∏—Ç–≤—É." +
                   "\n üî´ –ë–æ–π –±–æ—Ç (—Ü–µ–Ω–∞) -- —Å–æ–∑–¥–∞—ë—Ç –±–∏—Ç–≤—É —Å –±–æ—Ç–æ–º. ";
        }    
    }
}