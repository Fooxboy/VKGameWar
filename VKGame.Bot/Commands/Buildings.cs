using System;
using System.Collections.Generic;

namespace VKGame.Bot.Commands 
{
    public class Buildings : ICommand
    {
        public string Name => "–ø–æ—Å—Ç—Ä–æ–π–∫–∏";
        public string Arguments => "(), (–í–∞—Ä–∏–∞–Ω—Ç_–≤—ã–±–æ—Ä–∞)";
        public string Caption => "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–∞—à–∏–º–∏ –∑–¥–∞–Ω–∏—è–º–∏.";
        public TypeResponse Type => TypeResponse.Text;

        public object Execute(LongPollVK.Models.AddNewMsg msg)
        {

            var messageArray = msg.Text.Split(' ');
            if (messageArray.Length == 1)
                return GetBuildingsText(msg, $"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {DateTime.Now}");
            else
            {
                var type = typeof(Buildings);
                object obj = Activator.CreateInstance(type);
                var methods = type.GetMethods();

                foreach (var method in methods)
                { 
                    var attributesCustom = Attribute.GetCustomAttributes(method);

                    foreach (var attribute in attributesCustom)
                    {
                        if (attribute.GetType() == typeof(Attributes.Trigger))
                        {

                            var myAtr = ((Attributes.Trigger) attribute);

                            if (myAtr.Name == messageArray[1])
                            {

                                object result = method.Invoke(obj, new object[] {msg});
                                return (string) result;
                            }
                        }
                    }
                    
                }
            }
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.";
        }

        private string GetBuildingsText(LongPollVK.Models.AddNewMsg msg, string notify) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            var builds = new Api.Builds(msg.PeerId);        
            return $"‚Äº{notify}"+
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\n‚ö†–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–±–ª—é–¥–∞—Ç—å –∫–∞–∫–∏–µ –∑–¥–∞–Ω–∏—è —É –í–∞—Å –µ—Å—Ç—å. –°–º–æ–∂–µ—Ç–µ –∏—Ö –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å."+
                   $"\n"+
                   $"\n–í–ê–®–ò –ó–î–ê–ù–ò–Ø‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüè° –ñ–∏–ª—ã–µ –¥–æ–º–∞: {builds.Apartments}. –ú–æ–∂–µ—Ç –ø–æ—Å–µ–ª–∏—Ç—Å—è {builds.Apartments * 10} —Å–æ–ª–¥–∞—Ç."+
                   $"\n‚ö° –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏: {builds.PowerGenerators}. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è {builds.PowerGenerators * 10} ‚ö° –≤ –º–∏–Ω—É—Ç—É."+
                   $"\nüí¶ –í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—ã–µ –±–∞—à–Ω–∏: {builds.WaterPressureStation}. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è {builds.WaterPressureStation* 10} üíß –≤ –º–∏–Ω—É—Ç—É."+
                   $"\nüçî –ó–∞–∫—É—Å–æ—á–Ω—ã–µ: {builds.Eatery}. –ì–æ—Ç–æ–≤–∏—Ç—Å—è {builds.Eatery * 5} üçï –≤ –º–∏–Ω—É—Ç—É."+
                   $"\n"+
                   $"\nüîã –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–∞—Ç–∞—Ä–µ–∏: {builds.WarehouseEnergy}"+
                   $"\nüåä –ë–æ—á–∫–∏ —Å –≤–æ–¥–æ–π: {builds.WarehouseWater}"+
                   $"\nüç¨ –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏: {builds.WarehouseEat}"+
                   $"\nüí£ –ê–Ω–≥–∞—Ä—ã: {builds.WarehouseEat}"+
                   $"\n"+
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüíµ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ: {Name} –∫—É–ø–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ—Å—Ç—Ä–æ–π–∫–∏"+
                   $"\n‚ñ∂ –¶–µ–Ω—ã –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤: {Name} —Ü–µ–Ω—ã"+
                   $"\n"+
                   $"\n‚öí –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: {Name} –ø—Ä–æ–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ—Å—Ç—Ä–æ–π–∫–∏"+
                   $"\n‚ñ∂ –¶–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤: {Name} —Ü–µ–Ω—ã";                             
                          
        }

        [Attributes.Trigger("—Ü–µ–Ω—ã")]
        public static string Prices(LongPollVK.Models.AddNewMsg msg) 
        {
            Dictionary<string,int> buildsList = new Dictionary<string, int>();
            buildsList.Add("–ñ–∏–ª–æ–π –¥–æ–º", 1000);
            buildsList.Add("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è", 600);
            buildsList.Add("–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è", 800);
            buildsList.Add("–ó–∞–∫—É—Å–æ—á–Ω–∞—è", 1000);
            buildsList.Add("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –±–∞—Ç–∞—Ä–µ—è", 1500);
            buildsList.Add("–ë–æ—á–∫–∞ —Å –≤–æ–¥–æ–π", 1500);
            buildsList.Add("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", 1500);
            buildsList.Add("–ê–Ω–≥–∞—Ä", 1500);
            

            string result = "–¶–ï–ù–´ –î–õ–Ø –ü–û–ö–£–ü–ö–ò‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
            foreach(var build in buildsList) 
            {
                result += $"üî∏ {build.Key} —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build.Value} üí≥\n";
            }
            result += "‚ñ∂ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–¥–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ—Å—Ç—Ä–æ–π–∫–∏\n ‚ö† –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å  –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∏—Ç—å –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é\n";
            result += "\n";
            Dictionary<string,int> buildsListSellOf = new Dictionary<string, int>();
            buildsListSellOf.Add("–ñ–∏–ª–æ–π –¥–æ–º", 500);
            buildsListSellOf.Add("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è", 300);
            buildsListSellOf.Add("–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω–∞—è –±–∞—à–Ω—è", 400);
            buildsListSellOf.Add("–ó–∞–∫—É—Å–æ—á–Ω–∞—è", 500);
            buildsListSellOf.Add("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –±–∞—Ç–∞—Ä–µ—è", 700);
            buildsListSellOf.Add("–ë–æ—á–∫–∞ —Å –≤–æ–¥–æ–π", 700);
            buildsListSellOf.Add("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", 700);
            buildsListSellOf.Add("–ê–Ω–≥–∞—Ä", 700);
            

            result += "–¶–ï–ù–´ –î–õ–Ø –ü–†–û–î–ê–ñ–ò‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
            foreach(var build in buildsListSellOf) 
            {
                result += $"üî∏ {build.Key} —Å—Ç–æ–∏–º–æ—Å—Ç—å: {build.Value} üí≥\n";
            }
            result += "‚ñ∂ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –∑–¥–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ø–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ—Å—Ç—Ä–æ–π–∫–∏\n ‚ö† –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–∏–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–¥–∞—Ç—å –≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é\n";
            
            return result;
        }

        [Attributes.Trigger("–∫—É–ø–∏—Ç—å")]
        public static string BuyBuilds(LongPollVK.Models.AddNewMsg msg) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            var builds = new Api.Builds(msg.PeerId);
            var messageArray = msg.Text.Split(' ');
            
            Dictionary<string,int> buildsList = new Dictionary<string, int>();
            buildsList.Add("–ñ–∏–ª–æ–π", 1000);
            buildsList.Add("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é", 600);
            buildsList.Add("–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é", 800);
            buildsList.Add("–ó–∞–∫—É—Å–æ—á–Ω—É—é", 1000);
            buildsList.Add("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—É—é", 1500);
            buildsList.Add("–ë–æ—á–∫—É", 1500);
            buildsList.Add("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", 1500);
            buildsList.Add("–ê–Ω–≥–∞—Ä", 1500);
            

            var build = messageArray[2];
            foreach(var buildL in buildsList) 
            {
                if(buildL.Key.ToLower() == build.ToLower()) 
                {
                    if(!Notifications.RemovePaymentCard(buildL.Value, msg.PeerId, "–ü–æ–∫—É–ø–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫")) return "‚ùå –ù–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ—Ç –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã.";
                    if(buildL.Key.ToLower() == "–∂–∏–ª–æ–π")
                    {
                        var liveBuild = builds.Apartments;
                        liveBuild =liveBuild + 1;
                        builds.Apartments = liveBuild;
                    }else if(buildL.Key.ToLower() == "—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é") 
                    {
                        var liveBuild = builds.PowerGenerators;
                        liveBuild = liveBuild + 1;

                        builds.PowerGenerators = liveBuild;
                    }else if(buildL.Key.ToLower() == "–≤–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é") 
                    {
                        var liveBuild = builds.WaterPressureStation;
                        liveBuild= liveBuild +1;
                        builds.WaterPressureStation = liveBuild;
                    }else if(buildL.Key.ToLower() == "–∑–∞–∫—É—Å–æ—á–Ω—É—é") 
                    {
                        var liveBuild = builds.Eatery;
                        liveBuild = liveBuild + 1;

                        builds.Eatery = liveBuild;
                    }else if(buildL.Key.ToLower() == "—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—É—é") 
                    {
                        var liveBuild = builds.WarehouseEnergy;
                        liveBuild = liveBuild + 1;

                        builds.WarehouseEnergy = liveBuild;
                    }else if(buildL.Key.ToLower() == "–±–æ—á–∫—É") 
                    {
                        var liveBuild = builds.WarehouseWater;
                        liveBuild = liveBuild + 1;

                        builds.WarehouseWater = liveBuild;
                    }else if(buildL.Key.ToLower() == "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫") 
                    {
                        var liveBuild = builds.WarehouseEat;
                        liveBuild = liveBuild + 1;

                        builds.WarehouseEat = liveBuild;
                    }else if(buildL.Key.ToLower() == "–∞–Ω–≥–∞—Ä") {
                        var liveBuild = builds.Hangars;
                        liveBuild = liveBuild + 1;

                        builds.Hangars = liveBuild;
                    }
                    else return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –∑–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                    

                    return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–π–∫—É!";
                }
            }
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏!";
        }

        [Attributes.Trigger("–ø—Ä–æ–¥–∞—Ç—å")]
        public static string SellOfBuilds(LongPollVK.Models.AddNewMsg msg) 
        {

            var builds = new Api.Builds(msg.PeerId);
            var messageArray = msg.Text.Split(' ');
            
            Dictionary<string,int> buildsList = new Dictionary<string, int>();
            buildsList.Add("–ñ–∏–ª–æ–π", 500);
            buildsList.Add("–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é", 300);
            buildsList.Add("–í–æ–¥–æ–Ω–∞–ø–æ—Ä–Ω—É—é", 400);
            buildsList.Add("–ó–∞–∫—É—Å–æ—á–Ω—É—é", 500);
            buildsList.Add("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—É—é", 700);
            buildsList.Add("–ë–æ—á–∫—É", 700);
            buildsList.Add("–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", 700);
            buildsList.Add("–ê–Ω–≥–∞—Ä", 700);
            

            var build = messageArray[2];

            foreach(var buildL in buildsList) 
            {
                Notifications.EnterPaymentCard(buildL.Value,msg.PeerId, "–ü—Ä–æ–¥–∞–∂–∞ –ø–æ—Å—Ç—Ä–æ–µ–∫");
                return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –ø–æ—Å—Ç—Ä–æ–π–∫—É!";
            }

            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏! ";
        } 
    }
}