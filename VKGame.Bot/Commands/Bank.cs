using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.IO;

namespace VKGame.Bot.Commands
{
    public class Bank :ICommand 
    {
        public string Name => "–ë–∞–Ω–∫";
        public string Caption => "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∫–æ–º";
        public string Arguments => "(), (–í–∞—Ä–∏–∞–Ω—Ç_–í—ã–±–æ—Ä–∞)";
        public TypeResponse Type => TypeResponse.Text;
        public List<string> Commands => new List<string>() { "–æ–±–º–µ–Ω", "–∫—Ä–µ–¥–∏—Ç"};
        public Access Access => Access.User;


        public object Execute(Models.Message msg) 
        {
            var messageArray = msg.body.Split(' ');
            if (messageArray.Length == 1)
                return GetBankText(msg);
            
            var type = typeof(Bank);
            var result = Helpers.Command.CheckMethods(type, messageArray[1], msg);
            if (result != null) return result;
            var word = Common.SimilarWord(messageArray[1], Commands);
            return $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞." +
                    $"\n ‚ùì –í–æ–∑–º–æ–∂–Ω–æ, –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É - {Name} {word}"; 
        }

        public static class Api
        {
            public static long SumCredit(long userLvl) => userLvl * 500;
            public static bool NewCredit(long userId, long price)
            {
                var idCredit = Bot.Api.Credits.New(userId, price);
                var registry = new Bot.Api.Registry(userId);
                registry.Credit = idCredit;
                Statistics.NewCredit();
                Notifications.EnterPaymentCard(Convert.ToInt32(price), userId, "–∫—Ä–µ–¥–∏—Ç");
                return true;
            }
        }

        [Attributes.Trigger("–æ–±–º–µ–Ω")]
        public static string Exchange(Models.Message msg) 
        {
            var messageArray = msg.body.Split(' ');
            long count = 0;
            try 
            {
                count = Int64.Parse(messageArray[2]);
            }catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–Ω–∫ –æ–±–º–µ–Ω 10";
            }catch(FormatException) 
            {
                return $"‚ùå {messageArray[2]} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.";
            }
            var resources = new Bot.Api.Resources(msg.from_id);
            if(count > resources.Money) return $"‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –í–∞—à –±–∞–ª–∞–Ω—Å: {resources.Money} –Ω–∞–ª–∏—á–Ω—ã—Ö –º–æ–Ω–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {count} –Ω–∞–ª–∏—á–Ω—ã—Ö –º–æ–Ω–µ—Ç. –ù–∞–ª–∏—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –∫–µ–π—Å–æ–≤ –∏–ª–∏ –∏–∑ –ø—Ä–æ–º–æ –∞–∫—Ü–∏–π. –ê —Ç–∞–∫ –∂–µ –∫—É–ø–∏—Ç—å –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!";
            resources.Money = resources.Money - count;
            Notifications.EnterPaymentCard(Convert.ToInt32(count), msg.from_id, "–±–∞–Ω–∫");
            return $"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {count} –Ω–∞–ª–∏—á–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ!";
        }

        [Attributes.Trigger("–∫—Ä–µ–¥–∏—Ç")]
        public static string Loan(Models.Message msg) 
        {
            var user = new Bot.Api.User(msg.from_id);
            var registry = new Bot.Api.Registry(msg.from_id);
            var messageArray = msg.body.Split(' ');
            long count = 0;
            try
            {
                count = Int64.Parse(messageArray[2]);
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç.";
            }
            catch (FormatException)
            {
                return $"‚ùå {messageArray[2]} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!";
            }
            if(count > (Api.SumCredit(user.Level))) return $"‚ùå –í–∞—à–∞ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {Api.SumCredit(user.Level)}. –ß–µ–º –±–æ–ª—å—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞!";
            if(registry.Credit != 0) return "‚ùå –ù–∞ –í–∞—Å –µ—â—ë —á–∏—Å–ª–∏—Ç—Å—è –∫—Ä–µ–¥–∏—Ç!";

            Api.NewCredit(msg.from_id, count);
            
            return $"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {count}, —Å—É–º–º–∞ —Å–Ω–∏–º–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤!";
        }

        private string GetBankText(Models.Message msg) 
        {
            var resources = new Bot.Api.Resources(msg.from_id);
            return $"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüí∞ –ë–ê–ù–ö \"–í–ê–®–ò –î–ï–ù–¨–ì–ò\""+
                   $"\nüí≥ –°–æ—Å—Ç–æ—è–Ω–∏–µ –í–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞: {resources.MoneyCard}" +
                   $"\n‚ú® –°–æ—Å—Ç–æ—è–Ω–∏–µ –í–∞—à–µ–≥–æ –Ω–∞–ª–∏—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {resources.Money}"+
                   $"\n"+
                   $"\n–°–ü–ò–°–û–ö –£–°–õ–£–ì‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüíµ –û–ë–ú–ï–ù"+
                   $"\n‚ùì –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –í–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç." +
                   $"\n‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ë–∞–Ω–∫ –æ–±–º–µ–Ω —Å—É–º–º–∞" +
                   $"\n"+
                   $"\nüí∂ –ö–†–ï–î–ò–¢"+
                   $"\n‚ùì –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –¥–æ–ª–≥, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å." +
                   $"\n‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ë–∞–Ω–∫ –∫—Ä–µ–¥–∏—Ç —Å—É–º–º–∞" +
                   $"\n"+
                   $"\n‚ñ∂ –ü–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–º–æ—â—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –≥—Ä—É–ø–ø–µ." +
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ";
        }
    }
}