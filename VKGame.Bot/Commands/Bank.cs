using System;
using Newtonsoft.Json;
using System.IO;

namespace VKGame.Bot.Commands
{
    public class Bank :ICommand 
    {
        public string Name => "–±–∞–Ω–∫";
        public string Caption => "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∫–æ–º";
        public string Arguments => "(), (–í–∞—Ä–∏–∞–Ω—Ç_–í—ã–±–æ—Ä–∞)";
        public TypeResponse Type => TypeResponse.Text;
        public object Execute(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            if (messageArray.Length == 1)
                return GetBankText(msg);
            else
            {
                var type = typeof(Bank);
                object obj = Activator.CreateInstance(type);
                var methods = type.GetMethods();

                foreach (var method in methods)
                {
                    var attributesCustom = Attribute.GetCustomAttributes(method);

                    foreach (var attribute in attributesCustom)
                    {
                        if (attribute.GetType() == typeof(Attributes.Trigger))
                        {

                            var myAtr = ((Attributes.Trigger)attribute);

                            if (myAtr.Name == messageArray[1])
                            {

                                object result = method.Invoke(obj, new object[] { msg });
                                return (string)result;
                            }
                        }
                    }

                }
            }
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞";
        }

        [Attributes.Trigger("–æ–±–º–µ–Ω")]
        public static string Exchange(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            long count = 0;
            try 
            {
                count = Int64.Parse(messageArray[2]);
            }catch(IndexOutOfRangeException) 
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç.";
            }catch(FormatException) 
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.";
            }
            var resources = new Api.Resources(msg.PeerId);
            if(count > resources.Money) return "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.";
            resources.Money = resources.Money - count;
            Notifications.EnterPaymentCard(Convert.ToInt32(count), msg.PeerId, "–±–∞–Ω–∫");
            return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ –í–∞—à–∏ –º–æ–Ω–µ—Ç—ã!";
        }

        [Attributes.Trigger("–∫—Ä–µ–¥–∏—Ç")]
        public static string Loan(LongPollVK.Models.AddNewMsg msg) 
        {
            var user = Api.User.GetUser(msg.PeerId);
            var messageArray = msg.Text.Split(' ');
            long count = 0;
            try
            {
                count = Int64.Parse(messageArray[2]);
            }
            catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç.";
            }
            catch (FormatException)
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.";
            }
            if(count > (user.Level *500)) return $"‚ùå –í–∞—à–∞ —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {user.Level *500}";
            if(user.Credit != 0) return "‚ùå –ù–∞ –í–∞—Å –µ—â—ë —á–∏—Å–ª–∏—Ç—Å—è –∫—Ä–µ–¥–∏—Ç!";
            var idCredit = Api.Credit.New(msg.PeerId, count);
            user.Credit = idCredit;
            var listCredit = Api.CreditList.GetList();
            listCredit.Credits.Add(user.Id);
            
            Api.CreditList.SetList(listCredit);
            Api.User.SetUser(user);
            return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∫—Ä–µ–¥–∏—Ç —Å—É–º–º–∞ —Å–Ω–∏–º–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤!";
        }

        private string GetBankText(LongPollVK.Models.AddNewMsg msg) 
        {
            var resources = new Api.Resources(msg.PeerId);
            return $"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüí∞ –ë–ê–ù–ö \"–í–ê–®–ò –î–ï–ù–¨–ì–ò\""+
                   $"\nüí≥ –°–æ—Å—Ç–æ—è–Ω–∏–µ –í–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞: {resources.MoneyCard}"+
                   $"\n"+
                   $"\n–°–ü–ò–°–û–ö –£–°–õ–£–ì‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüíµ –û–ë–ú–ï–ù"+
                   $"\n‚ùì –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –í–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç."+
                   $"\n"+
                   $"\nüí∂ –ö–†–ï–î–ò–¢"+
                   $"\n‚ùì –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –¥–æ–ª–≥, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å."+
                   $"\n"+
                   $"\n‚ñ∂ –ü–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–º–æ—â—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç: (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å)" +
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ";
        }
    }
}