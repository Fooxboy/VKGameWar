using System;
using Newtonsoft.Json;
using System.IO;

namespace VKGame.Bot.Commands
{
    public class Store :ICommand
    {
        public string Name => "–º–∞–≥–∞–∑–∏–Ω";
        public string Caption => "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º –º–∞–≥–∞–∑–∏–Ω–∞";
        public string Arguments => "(), (–í–∞—Ä–∏–∞–Ω—Ç_–≤—ã–±–æ—Ä–∞)";
        public TypeResponse Type => TypeResponse.Text;
        public object Execute(LongPollVK.Models.AddNewMsg msg) 
        {
            var messageArray = msg.Text.Split(' ');
            if (messageArray.Length == 1)
                return GetStoreText(msg);
            else
            {
                var type = typeof(Store);
                object obj = Activator.CreateInstance(type);
                var methods = type.GetMethods();

                foreach (var method in methods)
                {
                    var attributesCustom = Attribute.GetCustomAttributes(method);

                    foreach (var attribute in attributesCustom)
                    {
                        if (attribute.GetType() == typeof(Attributes.Trigger))
                        {

                            var myAtr = ((Attributes.Trigger)attribute);

                            if (myAtr.Name == messageArray[1])
                            {

                                object result = method.Invoke(obj, new object[] { msg });
                                return (string)result;
                            }
                        }
                    }

                }
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞.";
            }
        }

        public static string GetStoreText(LongPollVK.Models.AddNewMsg msg) 
        {
            var resource = new Api.Resources(msg.PeerId);
            return $"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {resource.MoneyCard}"+
                   $"\n"+
                   $"\n‚ú® –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ."+
                   $"\n–°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"+
                   $"\nüíµ –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏."+
                   $"\n‚ñ∂ –¶–µ–Ω–∞: 20 –º–æ–Ω–µ—Ç –∑–∞ 1 –†–æ—Å—Å–∏–π—Å–∫–∏–π –†—É–±–ª—å."+
                   $"\n‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ [fooxboy|–∞–¥–º–µ–Ω—É] (–î–∞-–¥–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –Ω–µ—Ç)."+
                   $"\n"+
                   $"\nüîù –ü–æ–∫—É–ø–∫–∞ –æ–ø—ã—Ç–∞ –∑–∞ –º–æ–Ω–µ—Ç—ã." +
                   $"\n‚ñ∂ –¶–µ–Ω–∞: 1 –º–æ–Ω–µ—Ç–∞ –¥–ª—è 1 –æ–ø—ã—Ç–∞." +
                   $"\n‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å: –ú–∞–≥–∞–∑–∏–Ω –æ–ø—ã—Ç 10" +
                   $"\n"+
                   $"\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ" ;
        }

        [Attributes.Trigger("–æ–ø—ã—Ç")]
        public static string Exp(LongPollVK.Models.AddNewMsg msg)
        {
            var messageArray = msg.Text.Split(' ');
            long count = 0;
            try
            {
                count = Int64.Parse(messageArray[2]);
            } catch (IndexOutOfRangeException)
            {
                return "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ –æ–ø—ã—Ç–∞.";
            }catch (FormatException)
            {
                return "‚ùå –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ.";
            }
            var resources = new Api.Resources(msg.PeerId);
            var user = Api.User.GetUser(msg.PeerId);
            if (resources.MoneyCard < count) return "‚ùå –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Ç–∞–∫–æ–π –ø–æ–∫—É–ø–∫–∏!";
            Notifications.RemovePaymentCard(Convert.ToInt32(count), msg.PeerId, "–ü–æ–∫—É–ø–∫–∞ –æ–ø—ã—Ç–∞.");
            user.Experience = user.Experience + count;
            Api.User.SetUser(user);
            return "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –æ–ø—ã—Ç!";
        }
    }
}