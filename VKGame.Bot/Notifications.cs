using System;
using System.Threading;
using VKGame.Bot;

namespace VKGame.Bot 
{
    /// <summary>
    /// –ö–ª–∞—Å—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    /// </summary>
    public class Notifications 
    {



        /// <summary>
        /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /// </summary>
        /// <param name="count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</param>
        /// <param name="–ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"></param>
        /// <param name="–ò–º—è —Ä–∞–∑–¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏–ª"></param>
        /// <returns></returns>
        public static bool EnterPaymentCard(int count, long id, string name) 
        {
            var resources = new Api.Resources(id);
            var balance = resources.MoneyCard;
            balance+=count;
            resources.MoneyCard = balance;
            Api.Message.Send($"‚ú® –ü–ª–∞—Ç—ë–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!‚ú®" +
                $"\n" +
                $"\n ‚û° –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç—ë–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ {count} üí≥ –æ—Ç: {name}" +
                $"\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {resources.MoneyCard}", id);
            return true;
        }

        /// <summary>
        /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–≤–µ—Ä—Ö—É
        /// </summary>
        /// <param name="notify">—Ç–µ–∫—Å—Ç</param>
        /// <returns></returns>
        public static bool MainNotify(string notify)
        {
            Common.Notification = notify;
            return true;
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
        /// </summary>
        /// <param name="text"> –¢–µ–∫—Å—Ç</param>
        /// <param name="count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</param>
        /// <returns></returns>
        public static bool SendAllMessage(string text, int count)
        {
            var vk = Common.GetVk();
            int wait = 100;

            if (count > 15) wait = 1500;
            var dialogs = vk.Messages.GetDialogs(new VkNet.Model.RequestParams.MessagesDialogsGetParams
            {
                Count = Convert.ToUInt32(count),
                Offset = 0
            }).Messages;

            foreach(var dialog in dialogs)
            {
                var userId = dialog.UserId;

                Api.Message.Send($"‚ù§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!‚ù§" +
                                "\n{text}", userId.Value);
                Thread.Sleep(wait);
            }
            return true;
        }

        /// <summary>
        /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å —Å—á—ë—Ç–∞
        /// </summary>
        /// <param name="count">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç</param>
        /// <param name="id"> –ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <param name="name"> –ò–º—è —Ä–∞–∑–¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—ä–Ω—è–ª –¥–µ–Ω—å–∫–∏</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–Ω—è—Ç–∏—è</returns>
        public static bool RemovePaymentCard(int count, long id, string name) 
        {
            var resources = new Api.Resources(id);
            var balance = resources.MoneyCard;

            if(balance < count) return false;

            balance -= count;
            resources.MoneyCard = balance;
            Api.Message.Send($"‚ú® –ü–ª–∞—Ç—ë–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!‚ú®" +
                $"\n" +
                $"\n ‚û° –° –í–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ {count} üí≥ –Ω–∞ —Å—á—ë—Ç: {name}" +
                $"\n üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {resources.MoneyCard}", id);
            return true;
        }
    }
}