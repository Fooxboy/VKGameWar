using System.Threading;
using System;

namespace VKGame.Bot.BackgroundProcess
{
    /// <summary>
    /// –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ—Å—Ç—Ä–æ–µ–∫ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!
    /// </summary>
    public class Buildings 
    {
        /// <summary>
        /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ—á–µ–µ.
        /// </summary>
        /// <param name="obj">Id</param>
        public static void AddingResources(object obj) 
        {
            long id = (long)obj;   

            while(true) 
            {
                
                try
                {
                    var bufferTime = 0;
                    var resources = new Api.Resources(id);
                    var builds = new Api.Builds(id);
                    var user = Api.User.GetUser(id);
                    if (bufferTime > 60 || bufferTime == 60) bufferTime = 0;
                  
                    //–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω—è–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    if ((DateTime.Now.Day == 15) && (DateTime.Now.Hour == 8))
                    {
                        bufferTime = 0;
                        var referrals = Api.Referrals.GetList(id);
                        if(referrals.MouthCash != DateTime.Now.Month)
                        {
                            int countReferrals = referrals.ReferralsList.Count;
                            long sumCash = 0;
                            foreach (var referral in referrals.ReferralsList)
                            {
                                referrals.ReferralsList.Remove(referral);
                                var userRef = Api.User.GetUser(referral.Id);
                                long cashRef = 100 * userRef.Level;
                                resources.MoneyCard = resources.MoneyCard + cashRef;
                                sumCash += cashRef;
                                referral.FarmMoney += cashRef;
                                referrals.ReferralsList.Add(referral);
                            }

                            referrals.SumCash += sumCash;
                            referrals.MouthCash = DateTime.Now.Month;
                            if(countReferrals ==0)
                            {
                                Api.MessageSend($"üéâ –ï—Å–ª–∏ –±—ã —É –í–∞—Å –±—ã–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –≤—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ –Ω–∏—Ö –±–æ–Ω—É—Å! –ù–æ —É –í–∞—Å –∏—Ö –Ω–µ—Ç! –°–∫–æ—Ä–µ–µ –ø—Ä–∏–≤–æ–¥–∏—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π  –≤ –∏–≥—Ä—É! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –í–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–æ–º, –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å: –°—Ç–∞—Ä—Ç {id} ", id);

                            }else
                            {
                                Api.MessageSend($"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å {countReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sumCash} üí≥", id);
                                Notifications.EnterPaymentCard(Convert.ToInt32(sumCash), user.Id, "–†–µ—Ñ–µ—Ä–∞–ª—ã");
                            }
                            Api.Referrals.SetList(referrals, id); 
                        }
                    }

                    if (user.Experience >= user.Level * 100)
                    {    
                        ++user.Level;
                        Api.MessageSend($"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {user.Level} —É—Ä–æ–≤–µ–Ω—å! –î–∞–≤–∞–π –µ—â—ë –±–æ–ª—å—à–µ!", id);
                        Notifications.EnterPaymentCard(100, id, "–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å");
                    }
                    //—Å–∞–º–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
                    var energy = resources.Energy;
                    var eat = resources.Food;
                    var water = resources.Water;

                    if ((resources.Soldiery > 1) || (resources.Soldiery != 0))
                    {
                        if ((eat < resources.Soldiery) && (bufferTime == 30))
                        {
                            Api.MessageSend("üë®‚Äçüç≥ –ê –í–∞–º –Ω–µ—á–µ–º –∫–æ—Ä–º–∏—Ç—å –∞—Ä–º–∏—é! –ö—É–ø–∏—Ç–µ –µ–¥—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ 5 —Å–æ–ª–¥–∞—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –±—É–¥—É—Ç —É–º–∏—Ä–∞—Ç—å!", id);
                            resources.Soldiery = resources.Soldiery - 5;
                        }
                        else
                        {
                            if (eat > 0) eat = eat - resources.Soldiery;
                            else eat = 0;

                        }
                    }
                   
                    //–ü–∏–∑–¥–µ—Ü –≥–æ–≤–Ω–æ–∫–æ–¥, –Ω–æ –ø–æ—á–µ–º—É-—Ç–æ –ø–æ –¥—Ä—É–≥–æ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :/
                    if (energy < Commands.Buildings.Api.MaxEnergy(builds.WarehouseEnergy))
                    {
                        var temp =  Commands.Buildings.Api.MaxEnergyGen(builds.PowerGenerators);

                        if (energy < 0) energy = 0;

                        if((energy + temp) >= Commands.Buildings.Api.MaxEnergy(builds.WarehouseEnergy))
                        {
                            energy = Commands.Buildings.Api.MaxEnergy(builds.WarehouseEnergy);
                        }
                        else
                        {
                            energy += temp;
                        }

                        if (energy > Commands.Buildings.Api.MaxEnergy(builds.WarehouseEnergy))
                            energy = Commands.Buildings.Api.MaxEnergy(builds.WarehouseEnergy);
                    }

                    if (eat < 0) eat = 0;

                    if (eat < Commands.Buildings.Api.MaxFood(builds.WarehouseEat))
                    {
                        var temp = Commands.Buildings.Api.MaxFoodGen(builds.Eatery);
                        if((eat + temp) >= Commands.Buildings.Api.MaxFood(builds.WarehouseEat))
                        {
                            eat = builds.WarehouseEat * 100;
                        }else
                        {
                            eat = eat + temp;
                        }
                    }

                    if (eat > Commands.Buildings.Api.MaxFood(builds.WarehouseEat))
                        eat = Commands.Buildings.Api.MaxFood(builds.WarehouseEat);

                    if (water < 0) water = 0;

                    if (water < Commands.Buildings.Api.MaxWater(builds.WarehouseWater))
                    {
                        var temp = Commands.Buildings.Api.MaxWaterGen(builds.WaterPressureStation);
                        if ((water + temp) >= Commands.Buildings.Api.MaxWater(builds.WarehouseWater))
                            water = Commands.Buildings.Api.MaxWater(builds.WarehouseWater);
                        else water += temp;
                    }

                    if (water > Commands.Buildings.Api.MaxWater(builds.WarehouseWater))
                        water = Commands.Buildings.Api.MaxWater(builds.WarehouseWater);

                    resources.Energy = energy;
                    Thread.Sleep(333);
                    resources.Food = eat;
                    Thread.Sleep(333);
                    resources.Water = water;
                    Thread.Sleep(333);

                    bufferTime += 2;
                    Api.User.SetUser(user);
                }catch(Exception e)
                {
                    Bot.Statistics.NewError();
                    Logger.WriteError(e);
                }
                Thread.Sleep(60000);
            }
        } 
    }
   
}